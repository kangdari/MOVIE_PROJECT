{"version":3,"sources":["lib/movieAPI.js","module/search.js","components/Common/Header.js","module/loading.js","module/movieList.js","components/Common/Genre.js","components/Movie/MovieList.js","containers/MovieListContainer.js","routes/MovieList.js","components/Movie/MovieDetail.js","containers/MovieDetailContainer.js","routes/Search.js","App.js","serviceWorker.js","module/root.js","index.js"],"names":["key","url","getMovies","a","axios","get","res","searchMovies","title","searchMoviesId","id","initialMovieData","createAction","dispatch","type","movieAPI","payload","data","initialState","info","error","search","handleActions","state","action","Header","useDispatch","useState","setData","text","setText","callAPI","movieApi","results","onChange","useCallback","e","value","target","length","className","src","alt","to","placeholder","map","movie","onClick","startLoading","requestType","finishLoading","loading","GET_MOVIELIST","movieList","genres_List","name","Genre","genre_id","genreName","find","element","MovieListBlock","styled","div","MovieItemBlock","MoviePoster","MovieItem","selectMovie","release_date","genre_ids","poster_path","poster_url","substr","slice","i","MovieList","MovieListContainer","useSelector","useEffect","document","body","style","backgroundColor","backgroundImage","MovieDetail","tagline","backdrop_path","genres","overview","runtime","revenue","vote_average","backDropUrl","boxOffice","String","replace","backgroundRepeat","backgroundSize","substring","genre","MovieDetailContainer","Search","App","path","component","exact","Boolean","window","location","hostname","match","rootReducer","combineReducers","logger","createLogger","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d161e090.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst key = \"1dc302fada33a80e202370893f1759b4\";\r\nconst url = `https://api.themoviedb.org/3/movie/now_playing?api_key=${key}&language=ko&page=1&region=KR`; // 현재 상영 영화 정보 KR\r\n\r\n// 상영중인 영화 리스트 1페이지(20개)\r\nexport const getMovies = async () =>{\r\n    let res = await axios.get(`${url}`);\r\n    return res;\r\n}\r\n\r\nexport const getUpComingMovies = async () =>{\r\n    let res = await axios.get(`https://api.themoviedb.org/3/movie/upcoming?api_key=${key}&language=ko&page=1&region=KR`);\r\n    return res;\r\n}\r\n\r\n// 영화 title로 검색 API\r\nexport const searchMovies = async (title) =>{\r\n    // let res = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${title}`);\r\n    let res = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${title}&language=ko`);\r\n    return res;\r\n}\r\n\r\n\r\n// 영화 id로 검색 API\r\nexport const searchMoviesId = async (id) =>{\r\n    // let res = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${key}`);\r\n    let res = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=ko`);\r\n    return res;\r\n}\r\n\r\n","import * as movieAPI from '../lib/movieAPI';\r\nimport { createAction , handleActions } from 'redux-actions';\r\n\r\nconst SEARCH_MOVIE = 'search/SEARCH_MOVIE';\r\nconst SEARCH_MOVIE_SUCCESS = 'search/SEARCH_MOVIE_SUCCESS';\r\nconst SEARCH_MOVIE_FAILURE = 'search/SEARCH_MOVIE_FAILURE';\r\n\r\nconst SEARCH_MOVIEID = 'search/SEARCH_MOVIEID';\r\nconst SEARCH_MOVIEID_SUCCESS = 'search/SEARCH_MOVIEID_SUCCESS';\r\nconst SEARCH_MOVIEID_FAILURE = 'search/SEARCH_MOVIEID_FAILURE';\r\n\r\n// 검색 데이터 초기화\r\nconst INITIAL_MOVIE_DATA = 'search/INITIAL_MOVIE_DATA';\r\nexport const initialMovieData = createAction(INITIAL_MOVIE_DATA);\r\n\r\n// thunk 함수\r\nexport const searchMovies = title => async dispatch => {\r\n    dispatch({ type: SEARCH_MOVIE });\r\n    try {\r\n        const res = await movieAPI.searchMovies(title);\r\n        dispatch({\r\n            type: SEARCH_MOVIE_SUCCESS,\r\n            payload: res.data.results,\r\n        });\r\n    } catch (e) {\r\n        dispatch({\r\n            type : SEARCH_MOVIE_FAILURE,\r\n            payload : e\r\n        })\r\n    }\r\n};\r\n\r\nexport const searchMoviesId = id => async dispatch => {\r\n    dispatch({ type: SEARCH_MOVIEID });\r\n    try{\r\n        const res = await movieAPI.searchMoviesId(id);\r\n        dispatch({\r\n            type: SEARCH_MOVIEID_SUCCESS,\r\n            payload: res.data,\r\n        })\r\n    }catch(e){\r\n        dispatch({\r\n            type : SEARCH_MOVIEID_FAILURE,\r\n            payload : e\r\n        })\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    data: null,\r\n    info: null, // 자세한 영화 정보\r\n    error: null,\r\n};\r\n\r\nconst search = handleActions(\r\n    {\r\n        [SEARCH_MOVIE]: state => ({\r\n            ...state,\r\n        }),\r\n        [SEARCH_MOVIE_SUCCESS]: (state, action) => ({\r\n            ...state,\r\n            data: action.payload,\r\n        }),\r\n        [SEARCH_MOVIE_FAILURE]: (state, action) => ({\r\n            ...state,\r\n            error: action.payload,\r\n        }),\r\n\r\n        [SEARCH_MOVIEID]: state => ({\r\n            ...state,\r\n        }),\r\n        [SEARCH_MOVIEID_SUCCESS]: (state, action) => ({\r\n            ...state,\r\n            info: action.payload,\r\n        }),\r\n        [SEARCH_MOVIEID_FAILURE]: (state, action) => ({\r\n            ...state,\r\n            error: action.payload,\r\n        }),\r\n        // 나중에 사용 안하면 삭제\r\n        [INITIAL_MOVIE_DATA]: () => initialState,\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default search;\r\n","import React, { useState, useCallback } from 'react';\r\nimport './Header.css';\r\nimport * as movieApi from '../../lib/movieAPI';\r\nimport { Link } from 'react-router-dom';\r\nimport { searchMoviesId } from '../../module/search';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n    // 검색 결과\r\n    const [data, setData] = useState([]);\r\n    const [text, setText] = useState('');\r\n\r\n    const callAPI = async title => {\r\n        const res = await movieApi.searchMovies(title);\r\n        setData(res.data.results);\r\n    };\r\n\r\n    const onChange = useCallback(e => {\r\n        const value = e.target.value;\r\n        if (value.length > 1) {\r\n            callAPI(value);\r\n        }\r\n        setText(value);\r\n    }, []); // 컴포넌트 첫 렌더링 시 생성\r\n\r\n    const selectText = (value, id) => {\r\n        setText(value);\r\n        dispatch(searchMoviesId(id)); // info에 저장\r\n        setData();\r\n        setText('');\r\n    };\r\n\r\n    const renderTitle = () => {\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div className=\"MovieList\">\r\n                {data.map(movie => (\r\n                    <Link to={`/`} key={movie.id} >\r\n                        <p\r\n                            onClick={() => selectText(movie.title, movie.id)}\r\n                        >\r\n                            {movie.title}\r\n                        </p>\r\n                    </Link>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            <div className=\"logoBox\">\r\n                {/* <Link to=\"/\"> */}\r\n                    <img\r\n                        src=\"https://www.themoviedb.org/assets/2/v4/logos/powered-by-rectangle-green-dcada16968ed648d5eb3b36bbcfdd8cdf804f723dcca775c8f2bf4cea025aad6.svg\"\r\n                        alt=\"img\"\r\n                    />\r\n                {/* </Link> */}\r\n            </div>\r\n            <div className=\"listBox\">\r\n                <Link to=\"/movieList\">상영 영화</Link>\r\n            </div>\r\n            <div className=\"searchBox\">\r\n                <input\r\n                    value={text}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Search Movie...\"\r\n                />\r\n                {renderTitle()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    requestType => requestType, // Action type = actin.payload\r\n);\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        //// Action type = actin.payload\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loading;","import * as movieAPI from '../lib/movieAPI';\r\nimport { handleActions } from 'redux-actions';\r\nimport { startLoading, finishLoading } from './loading';\r\n\r\n// Action type\r\nconst GET_MOVIELIST = 'movieList/GET_MOVIELIST';\r\nconst GET_MOVIELIST_SUCCESS = 'movieList/GET_MOVIELIST_SUCCESS';\r\nconst GET_MOVIELIST_FAILURE = 'movieList/GET_MOVIELIST_FAILURE';\r\n\r\n// const GET_UPCOMING_MOVIELIST = 'movieList/GET_UPCOMING_MOVIELIST';\r\n// const GET_UPCOMING_MOVIELIST_SUCCESS = 'movieList/GET_UPCOMING_MOVIELIST_SUCCESS';\r\n// const GET_UPCOMING_MOVIELIST_FAILURE = 'movieList/GET_UPCOMING_MOVIELIST_FAILURE';\r\n\r\n// thunk 함수, 함수 내부에서 시작할 때, 성공할 때, 실패했을 때\r\n// 서로 다른 액션을 디스패치 함.\r\n// thunk 함수는 기존의 액션 생성 함수에서 일반 액션 객체를 반환하는 대신 함수를(dispatch) 반환 함.\r\nexport const getMovieList = () => async dispatch => {\r\n    dispatch({ type: GET_MOVIELIST }); // 요청 시작\r\n    try {\r\n        const res = await movieAPI.getMovies();\r\n        dispatch(startLoading(GET_MOVIELIST)); // 로딩 시작\r\n        dispatch({\r\n            type: GET_MOVIELIST_SUCCESS, // 요청 성공\r\n            payload: res.data.results, // API 호출 결과 값\r\n        });\r\n        dispatch(finishLoading(GET_MOVIELIST));\r\n    } catch (e) {\r\n        dispatch(startLoading(GET_MOVIELIST)); // 로딩 시작\r\n        dispatch({\r\n            type: GET_MOVIELIST_FAILURE, // 요청 실패\r\n            payload: e,\r\n            error: true,\r\n        });\r\n        dispatch(finishLoading(GET_MOVIELIST));\r\n        throw e;\r\n    }\r\n};\r\n\r\n// export const getUpComingMovieList = () => async dispatch => {\r\n//     dispatch({ type: GET_UPCOMING_MOVIELIST }); // 요청 시작\r\n//     try {\r\n//         const res = await movieAPI.getMovies();\r\n//         dispatch(startLoading(GET_UPCOMING_MOVIELIST)); // 로딩 시작\r\n//         dispatch({\r\n//             type: GET_UPCOMING_MOVIELIST_SUCCESS, // 요청 성공\r\n//             payload: res.data.results, // API 호출 결과 값\r\n//         });\r\n//         dispatch(finishLoading(GET_UPCOMING_MOVIELIST));\r\n//     } catch (e) {\r\n//         dispatch(startLoading(GET_UPCOMING_MOVIELIST)); // 로딩 시작\r\n//         dispatch({\r\n//             type: GET_UPCOMING_MOVIELIST_FAILURE, // 요청 실패\r\n//             payload: e,\r\n//             error: true,\r\n//         });\r\n//         dispatch(finishLoading(GET_UPCOMING_MOVIELIST));\r\n//         throw e;\r\n//     }\r\n// };\r\n\r\n// 초기 설정\r\nconst initialState = {\r\n    movieList: null,\r\n    // upComingMovieList: null,\r\n    loading : false,\r\n    error: null,\r\n};\r\n\r\n// 리듀서\r\nconst movieList = handleActions(\r\n    {\r\n        [GET_MOVIELIST]: state => ({\r\n            ...state,\r\n        }),\r\n        [GET_MOVIELIST_SUCCESS]: (state, action) => ({\r\n            ...state,\r\n            movieList: action.payload,\r\n        }),\r\n        [GET_MOVIELIST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error: error,\r\n        }),\r\n        // [GET_UPCOMING_MOVIELIST]: state => ({\r\n        //     ...state,\r\n        // }),\r\n        // [GET_UPCOMING_MOVIELIST_SUCCESS]: (state, action) => ({\r\n        //     ...state,\r\n        //     upComingMovieList: action.payload,\r\n        // }),\r\n        // [GET_UPCOMING_MOVIELIST_FAILURE]: (state, { payload: error }) => ({\r\n        //     ...state,\r\n        //     error: error,\r\n        // }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default movieList;\r\n","import React from 'react';\r\n\r\nconst genres_List = [\r\n    {\r\n        id: 28,\r\n        name: '액션',\r\n    },\r\n    {\r\n        id: 12,\r\n        name: '모험',\r\n    },\r\n    {\r\n        id: 16,\r\n        name: '애니메이션',\r\n    },\r\n    {\r\n        id: 35,\r\n        name: '코미디',\r\n    },\r\n    {\r\n        id: 80,\r\n        name: '범죄',\r\n    },\r\n    {\r\n        id: 99,\r\n        name: '다큐멘터리',\r\n    },\r\n    {\r\n        id: 18,\r\n        name: '드라마',\r\n    },\r\n    {\r\n        id: 10751,\r\n        name: '가족',\r\n    },\r\n    {\r\n        id: 14,\r\n        name: '판타지',\r\n    },\r\n    {\r\n        id: 36,\r\n        name: '역사',\r\n    },\r\n    {\r\n        id: 27,\r\n        name: '공포',\r\n    },\r\n    {\r\n        id: 10402,\r\n        name: '음악',\r\n    },\r\n    {\r\n        id: 9648,\r\n        name: '미스터리',\r\n    },\r\n    {\r\n        id: 10749,\r\n        name: '로맨스',\r\n    },\r\n    {\r\n        id: 878,\r\n        name: 'SF',\r\n    },\r\n    {\r\n        id: 10770,\r\n        name: 'TV 영화',\r\n    },\r\n    {\r\n        id: 53,\r\n        name: '스릴러',\r\n    },\r\n    {\r\n        id: 10752,\r\n        name: '전쟁',\r\n    },\r\n    {\r\n        id: 37,\r\n        name: '서부',\r\n    },\r\n];\r\n\r\nconst Genre = ({ genre_id }) => {\r\n    const genreName = genres_List.find(element => element.id === genre_id).name;\r\n\r\n    return <span>{genreName}</span>;\r\n};\r\n\r\nexport default Genre;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Genre from '../Common/Genre';\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { faStarHalf } from \"@fortawesome/free-solid-svg-icons\";\r\n// <FontAwesomeIcon icon={faStarHalf} />\r\n\r\nconst MovieListBlock = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst MovieItemBlock = styled.div`\r\n    width: 150px;\r\n    margin-bottom: 2.5rem;\r\n    transition: opacity 0.5s;\r\n\r\n    &:hover{\r\n        opacity: 0.6\r\n    }\r\n\r\n    .thum{\r\n        position: relative;\r\n    }\r\n\r\n    .date{\r\n        position: absolute;\r\n        left: 0px;\r\n        bottom: 4px;\r\n        width: 150px;\r\n        text-align: center;\r\n        margin: 0;\r\n        z-index: 1;\r\n    }\r\n\r\n    .backColor{\r\n        position: absolute;\r\n        left: 0px;\r\n        bottom: 4px;\r\n        width: 150px;\r\n        text-align: center;\r\n        text-indent: -9999px;\r\n        margin: 0;\r\n        background: black;\r\n        opacity: 0.5;\r\n    }\r\n\r\n    img{\r\n        max-width : 150px;\r\n        min-height: 225px;\r\n    }\r\n\r\n    p{\r\n        margin: 0;\r\n        font-size: 0.8rem;\r\n    }\r\n    span{\r\n        font-size: 0.8rem;\r\n        padding-right: 3px;\r\n    }\r\n`;\r\n\r\nconst MoviePoster = ({ url }) => {\r\n    return <img src={url} alt=\"poster\" />\r\n}\r\n\r\nconst MovieItem = ({ movie, selectMovie }) => {\r\n    const {\r\n        id,\r\n        title,\r\n        release_date,\r\n        genre_ids, // 장르는 배열 형태\r\n        poster_path,\r\n    } = movie;\r\n    const poster_url = `https://image.tmdb.org/t/p/w342/${poster_path}`;\r\n\r\n    return (\r\n        // 클릭 시 영화 상세 검색\r\n        <Link to={`/`} onClick={() => selectMovie(id)}>\r\n            <MovieItemBlock>\r\n                <div className=\"thum\">\r\n                    <MoviePoster url={poster_url} />\r\n                    <span className=\"date\">{release_date}</span>\r\n                    <p className=\"backColor\">개봉일</p>\r\n                </div>\r\n                <p>{title.length > 13 ? `${title.substr(0, 13)}...` : title}</p>\r\n                {genre_ids.slice(0, 3).map((genre_id, i) => (\r\n                    <Genre genre_id={genre_id} key={i} />\r\n                ))}\r\n            </MovieItemBlock>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst MovieList = ({ movieList, loading, error, selectMovie }) => {\r\n    if (error) {\r\n        return <MovieListBlock>Error!!</MovieListBlock>\r\n    }\r\n\r\n    return (\r\n        <MovieListBlock>\r\n            {loading && '로딩 중...'}\r\n            {!loading && movieList && movieList.map(movie => (\r\n                <MovieItem movie={movie} key={movie.id} selectMovie={selectMovie} />\r\n            ))}\r\n        </MovieListBlock>\r\n    );\r\n};\r\n\r\nexport default MovieList;","import React, { useEffect } from 'react';\r\nimport { getMovieList } from '../module/movieList';\r\nimport { searchMoviesId } from '../module/search';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport MovieList from '../components/Movie/MovieList';\r\n// 컴포넌트\r\n\r\nconst MovieListContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const { movieList, loading, error} = useSelector(state =>({\r\n        movieList: state.movieList.movieList,\r\n        loading: state.loading['movieList/GET_MOVIELIST'],\r\n        error: state.movieList.error,\r\n    }))\r\n\r\n    // 영화 리스트 호출\r\n    useEffect(() => {\r\n        dispatch(getMovieList());\r\n    }, [dispatch]);\r\n\r\n    const selectMovie = id =>{\r\n        dispatch(searchMoviesId(id));\r\n    }\r\n\r\n    return <MovieList movieList={movieList} loading={loading} error={error} selectMovie={selectMovie}/>;\r\n};\r\n\r\nexport default MovieListContainer;\r\n","import React, { useEffect } from 'react';\r\nimport Header from '../components/Common/Header';\r\nimport MovieListContainer from '../containers/MovieListContainer';\r\n// 상영 영화, 개봉 예정 영화 리스트 ...\r\n// import from '../components/MovieList.js'\r\n\r\n\r\nconst MovieList = () => {\r\n\r\n    // 컴포넌트로 이동\r\n    useEffect(() => {\r\n        document.body.style.backgroundColor = \"black\"\r\n        document.body.style.backgroundImage = 'none'\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <MovieListContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MovieList;\r\n","import React, { useEffect } from 'react';\r\nimport './MovieDetail.css';\r\nimport Genre from '../Common/Genre';\r\n\r\nconst MovieDetail = ({ info }) => {\r\n    const {\r\n        title,\r\n        tagline,\r\n        release_date,\r\n        backdrop_path,\r\n        poster_path,\r\n        genres, // id, name 객체 배열\r\n        overview,\r\n        runtime,\r\n        revenue,\r\n        vote_average,\r\n    } = info;\r\n    const poster_url = `https://image.tmdb.org/t/p/w780/${poster_path}`;\r\n    const backDropUrl = `https://image.tmdb.org/t/p/original/${backdrop_path}`;\r\n    const no_image_url = `https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRogidlVrfx2Q_qKWJIZ43w4RbD4YCaf6lBXG5LjnyrxxZ8Q4xw`;\r\n    // 정규표현식 문자열 3번째 마다 , 삽입\r\n    let boxOffice = String(revenue).replace(/(\\d)(?=(?:\\d{3})+(?!\\d))/g, '$1,');\r\n\r\n    // 배경 이미지 변경\r\n    useEffect(()=>{\r\n        document.body.style.backgroundImage = `url('${backDropUrl}')`\r\n        document.body.style.backgroundRepeat = 'no-repeat';\r\n        document.body.style.backgroundSize = 'cover';\r\n    }, [backDropUrl])\r\n\r\n    return (\r\n        <div className=\"MovieContainer\">\r\n            <div className=\"img_container\">\r\n                {poster_path ? (\r\n                    <img src={poster_url} alt=\"poster\" />\r\n                ) : (\r\n                    <img\r\n                        className=\"noImage\"\r\n                        src={no_image_url}\r\n                        alt=\"noImage\"\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className=\"Movie_Info_Container\">\r\n                <div className=\"Movie_upInfo\">\r\n                    <h1>{title}</h1>\r\n                    <span>{tagline}</span>\r\n                    <p>\r\n                        {overview.length > 200\r\n                            ? `${overview.substring(0.2)}...`\r\n                            : overview}\r\n                    </p>\r\n                </div>\r\n                <div className=\"Movie_downInfo\">\r\n                    <div className=\"Movie_downInfo_Genre\">\r\n                        {genres.map((genre, i) => (\r\n                            <Genre key={i} genre_id={genre.id} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"Movie_downInfo_container\">\r\n                        <div className=\"info_box\">\r\n                            <p>Original Release</p>\r\n                            <p>{release_date}</p>\r\n                        </div>\r\n                        <div className=\"info_box\">\r\n                            <p>Running Time</p>\r\n                            <p>{runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"info_box\">\r\n                            <p>Box Office</p>\r\n                            <p>${boxOffice}</p>\r\n                        </div>\r\n                        <div className=\"info_box\">\r\n                            <p>Vote Average:</p>\r\n                            <p>{vote_average} / 10</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieDetail;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { initialMovieData } from '../module/search';\r\nimport MovieDetail from '../components/Movie/MovieDetail';\r\n\r\n// 자세한 영화정보\r\nconst MovieDetailContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const { info, error } = useSelector(state => ({\r\n        info: state.search.info,\r\n        error: state.search.error,\r\n    }));\r\n\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            dispatch(initialMovieData());\r\n        }\r\n    }, [dispatch])\r\n\r\n    if (error) {\r\n        return <div>에러 발생!</div>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {info && !error && <MovieDetail info={info} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MovieDetailContainer;\r\n","import React from 'react';\r\n// import AutocompleteText from '../components/Auto/AutocompleteText';\r\nimport MovieDetailContainer from '../containers/MovieDetailContainer';\r\n\r\nimport Header from '../components/Common/Header';\r\n\r\nconst Search = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <MovieDetailContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom';\r\n// import AutocompleteText from './components/Auto/AutocompleteText';\r\n// import MovieDetailContainer from './containers/MovieDetailContainer';\r\n\r\nimport MovieList from './routes/MovieList';\r\nimport Search from './routes/Search';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"App-container\">\r\n                {/* 홈 페이지 + 검색 기능 */}\r\n                <Route path='/' component={Search} exact/>\r\n                {/* 상영 영화, 개봉 예정 영화 리스트 페이지 */}\r\n                <Route path='/movieList' component={MovieList} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport movieList from './movieList';\r\nimport loading from './loading';\r\nimport search from './search';\r\n\r\nconst rootReducer = combineReducers({\r\n    movieList,\r\n    loading,\r\n    search,\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './module/root';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst logger = createLogger();\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk, logger)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}